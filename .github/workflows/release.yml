name: Release
run-name: ${{ github.actor }} - ${{ github.event_name }} - ${{ github.sha }}
on:
  release:
    types: [published]
env:
  PROJECT_ID: chat-gpt-videos
  REGION: asia-south1
  REPOSITORY_NAME: app-management
  IMAGE_NAME: nest-server
  SERVICE_NAME: nest-server
  BS_IMAGE_NAME: batch-nest-server

# Set default working directory to app-management
defaults:
  run:
    working-directory: ./app-management

jobs:
  test_and_build:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - run: cp example.env .env
      - run: npm ci
      - run: npm run lint
      - run: npm run test:cov
      - run: npm run build
  github_pkg:
    name: Github build and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          context: ./app-management
          file: ./app-management/Dockerfile
          push: true
          tags: ghcr.io/deployment-helper/app-management:lastest
  github_pkg_batch_server:
    name: Github batch server build and push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          #          GitHub personal access token
          password: ${{ secrets.ACCESS_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          context: ./app-management
          file: ./app-management/Dockerfile.batch-service
          push: true
          tags: ghcr.io/deployment-helper/app-management-batch-server:lastest
  gcp_server:
    name: GCP Server build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud --quiet auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker image to Artifact Registry
        run: docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          flags: "--allow-unauthenticated --max-instances=1"
          env_vars: |
            AWS_COGNITO_POOL_URL=${{ secrets.AWS_COGNITO_POOL_URL }}
            AWS_COGNITO_JWKS_URL=${{ secrets.AWS_COGNITO_JWKS_URL }}
            GRANT_TYPE=${{ secrets.GRANT_TYPE }}
            CLIENT_ID=${{ secrets.CLIENT_ID }}
            REDIRECT_URI=${{ secrets.REDIRECT_URI }}
            SERVICE_KEY=${{ secrets.SERVICE_KEY }}            
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}            
            STORAGE_DIR=${{ secrets.STORAGE_DIR }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            NODE_ENV= 'production'
            FONT_DIR=${{ secrets.FONT_DIR }}
            TTS_SERVER_URL=${{ secrets.TTS_SERVER_URL }}
            AGENT_SERVICE_URL= https://temp-url.com
            AGENT_SERVICE_KEY= temp_key
          secrets: |
            AWS_ACCESS_KEY_ID=AWS_ACCESS_KEY_ID:latest
            AWS_SECRET_ACCESS_KEY=AWS_SECRET_ACCESS_KEY:latest
            GCP_API_KEY=GCP_API_KEY:latest
            OPENAI_API_KEY=LLM_API_KEY:latest
            REDIS_HOST=REDIS_HOST:latest
            REDIS_PASS=REDIS_PASS:latest
            SERVER_API_KEY=SERVER_API_KEY:latest
            VIDEO_API_BASE_URL=VIDEO_API_BASE_URL:latest
            VIDEO_API_KEY=VIDEO_API_KEY:latest
            GITHUB_TOKEN=GITHUB_TOKEN:latest

      - name: Show Deployed URL
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"
